#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

R5.6 Parameters and return values.  The difference between an argument and a return value is that an argument is passed
into a method, whereas a return value is the value returned from it.

You can have n number of arguments, whereas you can only have one return value. By varying either the number and/or type of arguments,
you change the method's signature, which means you may overload a method. Varying the return value only does not change the
method's signature and therefore does not qualify the method for overloading.

Since Java5, you can even specify a variable number of arguments aka varargs which looks something like this:
 private String[] someMethod(int nGrade, String... strNickNames) {//implementation};
Notice that the varargs parameter "String... strNickNames" must be listed last.  Calling this method would look something like this:
 String[] strReturnValues = someMethod(99, "Jim", "Jamie", "James", "Jamey", "Jimmy", "Jimbo");


R5.8 Pseudocode
create helper function int charToNum(Character letter)
if(letter == A or letter == B or letter == C)
    return 2
else if(letter == D or letter == E or letter == F)
    return 3
else if(letter == G or letter == H or letter == I)
    return 4
else if(letter == J or letter == K or letter == L)
    return 5
else if(letter == M or letter == N or letter == O)
    return 6
else if(letter == P or letter == Q or letter == R or letter == S)
    return 7
else if(letter == T or letter == U or letter == V)
    return 8
else if(letter == W or letter == X or letter == Y or letter == Z)
    return 9

in the main function:
read in the original phone number as a string  //example: "1-800-FLOWERS"
create a 3 elements array
split the string using '-' character and insert into the array
iterate on the last element of the array: array[2]
String lastElement = ""  //initialize an empty string
for i = 0; i < array[2].length; i++   //loop through the letter string for translation
    lastElement += charToNum(array[2].charAt(i))
array[2] = lastElement //replace array[2] with the translated number string

print array[0] + '-' + array[1] + '-' + array[2]




R5.10 Variable scope

in the main function:
b = g(10)
the script enters function g;

in the function g(10):
i = f(n) is summed up from 0 <= n < 10
the script enters function f;

f(1):
n*n <= 1: n iterate from 0 to 1
return n - 1 = 0

f(2):
n*n <= 2: n iterate from 0 to 1
return n - 1 = 0

f(3):
n*n <= 3: n iterate from 0 to 1
return n - 1 = 0

f(4):
n*n <= 4: n iterate from 0, 1 to 2
return n - 1 = 2 - 1 = 1

f(5):
n*n <= 5: n iterate from 0, 1 to 2
return n - 1 = 2 - 1 = 1

f(6):
n*n <= 6: n iterate from 0, 1 to 2
return n - 1 = 2 - 1 = 1

f(7):
n*n <= 7: n iterate from 0, 1 to 2
return n - 1 = 2 - 1 = 1

f(8):
n*n <= 8: n iterate from 0, 1 to 2
return n - 1 = 2 - 1 = 1

f(9):
n*n <= 9: n iterate from 0, 1, 2 to 3
return n - 1 = 3 - 1 = 2

back in function g, these results are summed up:
0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 2 = 7
function g(10) returns 7

back in main function, b = 7
final print out: 7 + 10 = 17



R5.14 Pass by value versus pass by reference
The values of x and y are passed into the falseSwap method.
Because it is not passed by reference, what happened inside the method stays inside the method.
It does not affect the value of x and y outside the falseSwap method.
Therefore, the method does not work.


R6.3 Considering loops
a/ 25
b/ 13
c/ 12
d/ ArrayIndexOutOfBoundsException
e/ 11
f/ 25
g/ 12
h/ -1


R6.10 Enhanced for-loop
a/ for (double element:values) { total = total + element; }
b/ for (double element:values) { total = total + element; } total = total - values[0];
c/ int index = 0;
       for (double element:values) {
           if(element == 3.0)
               return index;
           index++;
       }


R6.23 Computing runs
given array
set counts = 1;
set maxRun = 0; \\initialize max run
for int i = 0; i < array.length-1; i++
    if (a[i]==a[i+1])
        \\if the next element is the same, increment counts
        counts++;
    else
        \\if the next element is not the same, update maxRun if counts>maxRun
        if(counts>max) maxRun = counts;
        counts = 1; \\reset counter to 1
return maxRun


R6.29 Multi-dimensional arrays
int[][] values = new int[ROWS][COLUMNS];

1/ Fill all entries with 0
    for i = 0, i < ROWS, i++
        for j = 0, j < COLUMNS, j++
            values[i][j] = 0

2/ Fill elements alternately with 0s and 1s in a checkerboard pattern
    for i = 0, i < ROWS, i++
        if i%2 == 0
            for j = 0, j < COLUMNS, j++
                if j%2 == 0
                    values[i][j] = 0
                else
                    values[i][j] = 1
        else
            for j = 0, j < COLUMNS, j++
                if j%2 == 0
                    values[i][j] = 1
                else
                    values[i][j] = 0

3/ Fill only the elements at the top and bottom row with zeroes
    for j = 0, j < COLUMNS, j++
        values[0][j] = 0
        values[ROW-1][j] = 0

4/ Compute the sum of all elements
    sum = 0
    for i = 0, i < ROWS, i++
        for j = 0, j < COLUMNS, j++
            sum += values[i][j]
    return sum

5/ Print the array in tabular form
    for i = 0, i < ROWS, i++
        for j = 0, j < COLUMNS, j++
            System.out.print(values[i][j])
            System.out.print("\t")
        System.out.println()


R6.34 Understanding arrays
a/ true
b/ true
c/ false
d/ false. does not shrink
e/ false
f/ false


R7.1 Exceptions
1/ If a file for reading does not exist, there will be a FileNotFoundException;
2/ If a file to be written to does not exist, the program will create a new file.


R7.6 Throwing and catching
1/ Throwing an exception: the type of exception is expected,
and it will be handled using the throw statement to throw an exception project.

2/ Catching an exception: there might be multiple types of exception occurring from a block of code.
The block of code is placed inside a try statement, and catch statements each containing a type of exception handler will
execute if the corresponding exception occurs.


R7.7 Checked versus unchecked
1/ Checked exception: exceptions occurred due to external conditions beyond the programmer's control, such as IOException.
2/ Unchecked exception: descendants of RuntimeException which indicate error in the written code, such as IndexOutOfBoundsException.
3/ The checked exception need to be declared with the throws reserved word.


R7.8 Exceptions philosophy in Java
Unchecked exceptions such as IndexOutOfBoundsException are due to the programmer's mistake.
The compiler does not check whether the unchecked exceptions is handled.


R7.11 What is an exception object
The corresponding handler in the catch statement executes.
It might further retrieves the message associated with the exception.


R7.15 Scanner exceptions. Explain why these are either checked or unchecked.

next and nextInt methods can throw exceptions such as NoSuchElementException and InputMismatchException.
These are checked exceptions (IOException) as they are caused by external input condition beyond the programmer's control.
