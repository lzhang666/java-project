#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

R13.1 Terms
a/ Recursion is the kind of algorithm that solves the problem by using the solution
to the same problem with simpler inputs.

b/ Iteration is the process to repeated certain computation instructions
in a specified number of times or until certain condition is met.

c/ A infinite recursion: for a recursion to terminate, there must be a base case
at which the problem cannot be divided into smaller problems. Without the base case,
the recursion will keeps on running without termination.

d/ Recursive helper method: sometimes it is easier to modify the original problem before solving it.
The recursive method that gets called in the main function and solve the modified problem is recursive helper method.



R13.2 Smallest value
smallest(array){
    //base case:
    //if the array has only one value, array.length == 1
    //then return the value at the first index:
    if(array.length == 1){
        return array[0]
    }

    //recursive case:
    //compare the value at index [0] and index [1]
    if (array[0] < array[1]){
        array[1] = array[0]
        newArray = Arrays.copyOfRange(array, 1, arr.length) //take the sub array from index [1] to the last index
        return smallest(newArr); //recurse on the subarray
    }
    newArray = Arrays.copyOfRange(array, 1, arr.length) //take the sub array from index [1] to the last index
    return smallest(newArr); //recurse on the subarray
}


R13.4 Sort array of numbers

sortBySmallest(array, r, s){ //r lower bound index, s upper bound index
    //base case:
    //if the array has only one value, lower bound == upper bound, it is already sorted
    //then return the array:
    if(r == s){
        return array;
    }

    //recursive case:
    //find the smallest value in the array iteratively
    int smallestIdx = 0; //initialize smallest index as 0
    int smallestVal = array[0]; //initialize smallest value as the value at index 0
    for(i = 0; i < array; i++){
        if(smallestVal > array[i]){
            smallestIdx = i;
            smallestVal = array[i];
        }
    }
    int temp = array[0]; //record the value at array[0]
    int array[0] = array[smallestIdx]; //move the smallest value to index 0
    int array[smallestIdx] = temp; //swap the value
    return sortBySmallest(array, (r+1), s) // recurse on the subarray from the r+1 index to the last index
}



R13.6 Exponents recursively

recurseExp(x, n){ //x: the number, n: the power
    //base case:
    //define base case when n == 0 or n == 1
    if(n == 0){
        return 1;
    }
    else if (n == 1){
        return x;
    }
    //recursive case:
    else{
        return x * recurseExp(x, n-1);
    }



R13.8 Factorial recursively

recurseFactorial(n){ //n: the starting number
    //base case:
    //define base case when n == 0 or n == 1
    if(n == 0 or n == 1){
        return 1;
    }
    //recursive case:
    else{
        return n * recurseFactorial(n-1);
    }



R19.1 operations on Stream<String>
Provide expressions that compute the following information about a Stream<String>.

a/
long count = element.filter(w -> w.charAt(0) == 'a').count();

b/
long count = element.filter(w -> w.length() > 10 && w.charAt(0) == 'a').count();

c/
long count = element.filter(w -> w.charAt(0) == 'a').limit(100).count()

R19.3 How to read Java8
1/ words.filter(w -> w.length() > 10).limit(100).count()
count the number of words that have length greater than 10, and stop counting when the first 100 counts id reached

2/ words.limit(100).filter(w -> w.length() > 10).count()
for the first 100 words, count the number of words that have length greater than 10


R19.6 Transforming values
1/ turn a Stream<Double> into a Stream<String>:
    Stream<Double> numsDouble = Stream.of(1.0, 2.0, 3.0, 4.0, 5.0);
    List<String> listString = numsDouble
                                .map(w -> w.toString())
                                .collect(Collectors.toList());
    Stream<String> stringStream = listString.stream();

2/ turn Stream<String> back into a Stream<Double>:
    List<Double> listDouble = stringStream
                                .map(w -> Double.parseDouble(w))
                                .collect(Collectors.toList());
    Stream<Double> doubleStream = listDouble.stream();



R19.11 Terminal operations
1/ count()
2/ findFirst()
3/ findAny()
4/ limit()



R19.12 Collectors
1/ stream.toArray(T[]::new)
2/ stream.collect(Collectors.toList())
3/ stream.collect(Collectors.toSet())
4/ stream.collect(Collectors.joining(", ")
5/ stream.collect(Collectors.groupingBy(keyFunction, collector)
6/ Collectors.counting()
7/ Collectors.summingInt(); Collectors.summingDouble(); Collectors.summingLong()
8/ Collectors.maxBy()
9/ Collectors.averagingInt(); Collectors.averagingDouble(); Collectors.averagingLong();



